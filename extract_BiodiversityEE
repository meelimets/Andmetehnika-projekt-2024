import requests
import argparse
import csv

def fetch_gbif_data(country_code, start_year, end_year):
    # Define the URL for GBIF occurrence data API
    url = 'https://api.gbif.org/v1/occurrence/download/request'

    # Define the parameters for the POST request
    data = {
        'creator': 'creator',
        'notification_address': 'your_email@example.com',  # Replace with your email
        'format': 'SIMPLE_CSV',
        'predicate': {
            'type': 'and',
            'predicates': [
                {'type': 'equals', 'key': 'BASIS_OF_RECORD', 'value': 'HUMAN_OBSERVATION'},
                {'type': 'equals', 'key': 'COUNTRY', 'value': country_code},
                {'type': 'equals', 'key': 'HAS_COORDINATE', 'value': 'true'},
                {'type': 'equals', 'key': 'HAS_GEOSPATIAL_ISSUE', 'value': 'false'},
                {'type': 'between', 'key': 'YEAR', 'from': start_year, 'to': end_year}
            ]
        }
    }

    # Send a POST request to the API endpoint
    response = requests.post(url, json=data)

    # Check if the request was successful
    if response.status_code == 200:
        # Parse the JSON response to get the download key
        download_key = response.json().get('downloadKey')

        # Construct the URL for downloading the CSV file
        download_url = f'https://api.gbif.org/v1/occurrence/download/{download_key}'

        # Download the CSV file
        csv_data = requests.get(download_url).text

        # Save the CSV data to a file
        with open(f'gbif_occurrences_{start_year}_{end_year}.csv', 'w', newline='', encoding='utf-8') as csv_file:
            csv_file.write(csv_data)

        print('GBIF occurrence data downloaded successfully.')
    else:
        print('Failed to fetch GBIF occurrence data.')

def main():
    # Define command line arguments
    parser = argparse.ArgumentParser(description='Fetch GBIF occurrence data')
    parser.add_argument('country_code', type=str, help='ISO 3166-1 alpha-2 country code (e.g., "EE" for Estonia)')
    parser.add_argument('start_year', type=int, help='Start year (e.g., 2000)')
    parser.add_argument('end_year', type=int, help='End year (e.g., 2024)')
    args = parser.parse_args()

    # Fetch GBIF occurrence data
    fetch_gbif_data(args.country_code, args.start_year, args.end_year)

if __name__ == "__main__":
    main()
